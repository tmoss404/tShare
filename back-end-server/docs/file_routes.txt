All file-related routes are prefixed with /file/ and follow-this-naming-convention-with-hyphens. Data validation is done by this server.
Also, all requests have the fields listed wrapped in an Object. All routes should return at least a message and a success status wrapped in an Object.



// Add this function to your web browser's console before running the example scripts:
// Hey, don't blame me! Tanner wanted the HTTP statuses to work like this for the Angular side of things.
function statusReturnsResponse(status) {
    return true;
}



/file/upload:

This route retrieves a "signed S3 URL" that you can send a PUT request to upload a file directly to our S3 bucket. If the filePath parameter contains backwards-slashes (\), they will be converted into forwards-slashes (/). It prefixes the path with the user's account ID to ensure that they can only upload to their directory. It takes three parameters: loginToken, filePath, and fileType all wrapped in an Object. If the request is malformed or the provided login token is invalid, the request will be rejected and a success status of false is returned along with an error message.
Otherwise, an Object containing: message, success, signedUrl, and signedUrlData is returned. Please note that you must use the URL returned in signedUrlData when you are sending the PUT request (the signedUrl parameter is for *viewing* the file).
- loginToken: String
- filePath: String
- fileType: String

Returns an Object containing: message, success, signedUrl, and signedUrlData (or just message and success if the request was rejected):
{"message":"Successfully retrieved a signed S3 URL.","success":true,"signedUrl":"https://bucketeer-72303b66-e175-4b67-aade-fd2764a19e0b.s3.amazonaws.com/294/your%2Ffile.txt","signedUrlData":"https://bucketeer-72303b66-e175-4b67-aade-fd2764a19e0b.s3.amazonaws.com/your/file.txt?AWSAccessKeyId=AKIARVGPJVYVDSNAKJLB&Content-Type=text%2Fplain&Expires=1623134024&Signature=1t%2BbfbARppnAqTjkIcenpWiMOGI%3D&x-amz-acl=public-read"}

Example request:

var xhttp = new XMLHttpRequest();
xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && statusReturnsResponse(this.status)) {
        console.log(this.response);
    }
};
xhttp.open("POST", "http://tshare-back-end.herokuapp.com/file/upload", true);
xhttp.setRequestHeader("Content-Type", "application/json");
xhttp.send(JSON.stringify({
loginToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50SWQiOjI5NCwiZW1haWwiOiJ0ZXN0LmJhY2tlbmRAZ21haWwuY29tIiwiaWF0IjoxNjIzMDQ1ODEyLCJleHAiOjE2MjMwNDk0MTJ9.2wZoRaMeEifG9KgSCm-TWV6QnTYk8f6Z_uWd0bHceLU",
filePath: "your/file.txt",
fileType: "text/plain"
}));

Example *upload* request *after* you receive the signed URL data:

var xhttp = new XMLHttpRequest();
xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && statusReturnsResponse(this.status)) {
        console.log(this.response);
    }
};
// The URL here should be the one from signedUrlData:
xhttp.open("PUT", "https://bucketeer-72303b66-e175-4b67-aade-fd2764a19e0b.s3.amazonaws.com/your/file.txt?AWSAccessKeyId=AKIARVGPJVYVDSNAKJLB&Content-Type=text%2Fplain&Expires=1623132431&Signature=VlUbriGrzmcXQNVrKY1HTnybQ1I%3D&x-amz-acl=public-read", true);
xhttp.setRequestHeader("Content-Type", "text/plain");  // This header MUST match up with the fileType you provided in the sign URL request.
xhttp.setRequestHeader("x-amz-acl", "public-read");  // You MUST have this header set, otherwise AWS will give you error 403.
xhttp.send("This is the contents of my file!");


/file/list:

This route allows you to retrieve a list of file paths and file metadata that are prefixed with the specified directory path. The data it returns in "data" is specified by AWS S3. See https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListObjectsV2.html for more documentation on the data return variable specifically. 
Please note that backwards-slashes (\) will be converted to forwards-slashes (/). Having trailing or prefixed /'s in dirPath will cause undefined behavior. Also, sensitive information is removed from data. See back-end-server/models/fileUtil.js#processS3Data for what is being filtered. It also adds an isDirectory variable to each Contents element.
It takes three parameters wrapped in an Object:
- loginToken: String
- dirPath: String, or null/undefined to retrieve all of the user's files
- maxFiles: int, non-zero and non-negative, up to 1000

Returns an Object containing at least message, and success. Optionally, data is returned as well if the request was successful:
{"message":"Successfully retrieved the user's files.","success":true,"data":{"IsTruncated":false,"Contents":[{"Key":"your new/directory/path/file.txt","LastModified":"2021-07-01T21:26:35.000Z","ETag":"\"38e08468daab0c0900839d05afbea3da\"","Size":32,"StorageClass":"STANDARD","isDirectory":false}],"Name":"bucketeer-72303b66-e175-4b67-aade-fd2764a19e0b","Prefix":"","MaxKeys":1000,"CommonPrefixes":[],"KeyCount":1}}

Example request:

// Listing files:
var xhttp = new XMLHttpRequest();
xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && statusReturnsResponse(this.status)) {
        console.log(this.response);
    }
};
xhttp.open("POST", "http://tshare-back-end.herokuapp.com/file/list", true);
xhttp.setRequestHeader("Content-Type", "application/json");
xhttp.send(JSON.stringify({
    loginToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50SWQiOjI5NCwiZW1haWwiOiJ0ZXN0LmJhY2tlbmRAZ21haWwuY29tIiwiaWF0IjoxNjIzMDQ1ODEyLCJleHAiOjE2MjMwNDk0MTJ9.2wZoRaMeEifG9KgSCm-TWV6QnTYk8f6Z_uWd0bHceLU",
    dirPath: "your new/directory",  // Optional, can be null or undefined
    maxFiles: 1000  // Optional, can be undefined
}));


/file/make-directory:

This route allows you to create an empty directory in AWS S3. It does this by creating an empty file inside dirPath called "__tshare-meta__". The request will be rejected if the specified dirPath is not already empty. It takes one parameter wrapped in an Object - dirPath.
Trailing and prefixed backwards/forwards slashes in dirPath will cause undefined behavior. Backslashes are automatically converted into forwards slashes:
- loginToken: String
- dirPath: String

Example request:

var xhttp = new XMLHttpRequest();
xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && statusReturnsResponse(this.status)) {
        console.log(this.response);
    }
};
xhttp.open("POST", "http://tshare-back-end.herokuapp.com/file/make-directory", true);
xhttp.setRequestHeader("Content-Type", "application/json");
xhttp.send(JSON.stringify({
    loginToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50SWQiOjI5NCwiZW1haWwiOiJ0ZXN0LmJhY2tlbmRAZ21haWwuY29tIiwiaWF0IjoxNjIzMDQ1ODEyLCJleHAiOjE2MjMwNDk0MTJ9.2wZoRaMeEifG9KgSCm-TWV6QnTYk8f6Z_uWd0bHceLU",
    dirPath: "your new\\directory/path\\can-contain-all-sorts-of-chars"
}));


/file/delete:

This route allows you to delete a file or directory (and its contents) into their recycle bin. It does this by moving the object into an accountId_recycle root directory. Duplicate files are allowed and will be named such as <filename>_<value>.<extension>.
Trailing and prefixed backward/forward slashes in the path name will cause undefined behaviour. It takes three parameters wrapped in an Object:
- loginToken: String
- path: String
- isDirectory: boolean, indicates whether or not path specifies a directory

Example request:

var xhttp = new XMLHttpRequest();
xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && statusReturnsResponse(this.status)) {
        console.log(this.response);
    }
};
xhttp.open("POST", "http://localhost/file/delete", true);
xhttp.setRequestHeader("Content-Type", "application/json");
xhttp.send(JSON.stringify({
    loginToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50SWQiOjI5NCwiZW1haWwiOiJ0ZXN0LmJhY2tlbmRAZ21haWwuY29tIiwiaWF0IjoxNjIzMDQ1ODEyLCJleHAiOjE2MjMwNDk0MTJ9.2wZoRaMeEifG9KgSCm-TWV6QnTYk8f6Z_uWd0bHceLU",
    path: "your\\directory/can contain lots of chars",
    isDirectory: true
}));