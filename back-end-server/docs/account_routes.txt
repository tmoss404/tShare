All account-related routes are prefixed with /account/ and follow-this-naming-convention-with-hyphens. Data validation is done by this server.
Also, all requests have the fields listed wrapped in an Object. All routes should return at least a message and a success status wrapped in an Object.



// Add this function to your web browser's console before running the example scripts:
// Hey, don't blame me! Tanner wanted the HTTP statuses to work like this for the Angular side of things.
function statusReturnsResponse(status) {
    return true;
}



/account/register:

This route registers account information in the database. It takes two parameters inside an Object and returns an Object containing a message and success property.
If the email, password, or the request body is malformed, the request will be rejected and a success status of false is returned along with an error message:
- email: String
- password: String

Returns a message and a success status wrapped in an object:
{"message":"Created your account successfully.","success":true}

Example request:

var xhttp = new XMLHttpRequest();
xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && statusReturnsResponse(this.status)) {
        console.log(this.response);
    }
};
xhttp.open("POST", "http://tshare-back-end.herokuapp.com/account/register", true);
xhttp.setRequestHeader("Content-Type", "application/json");  // Please note that the Content-Type must be application/json to be received properly. This goes for ALL routes.
xhttp.send(JSON.stringify({
    email: "eric.d.mcdonald@gmail.com",
    password: "myValidTestPwd!123"
}));


/account/logout:

This route will logout the user by adding their JWT token to the Invalid_Token table in the database. It takes the same parameter as check-login, which is one parameter: loginToken wrapped in an Object. This request will fail if the token is already considered invalid:
- loginToken: String

Returns a message and a success status such as:
{"message":"Token has been invalidated successfully.","success":true}

Example request:

var xhttp = new XMLHttpRequest();
xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && statusReturnsResponse(this.status)) {
        console.log(this.response);
    }
};
xhttp.open("POST", "http://tshare-back-end.herokuapp.com/account/logout", true);
xhttp.setRequestHeader("Content-Type", "application/json");
xhttp.send(JSON.stringify({
    loginToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50SWQiOjI4NCwiZW1haWwiOiJlcmljLmQubWNkb25hbGRAZ21haWwuY29tIiwiaWF0IjoxNjIzMDE2NjI3LCJleHAiOjE2MjMwMTY5Mjd9.gIXfYy3TKTgo5dWxbZdiomxsEwhiDfTlw52YZluG7gI"
}));


/account/login:

This route attempts to login a user using their email and password. It takes two parameters wrapped in an Object. If the email, password, or the Object itself is malformed, then the request will be rejected:
- email: String
- password: String

Returns a message, success status, and optionally loginToken if the request was resolved:
{"message":"Logged in successfully.","success":true,"loginToken":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50SWQiOjI4NCwiZW1haWwiOiJlcmljLmQubWNkb25hbGRAZ21haWwuY29tIiwiaWF0IjoxNjIzMDE2NjI3LCJleHAiOjE2MjMwMTY5Mjd9.gIXfYy3TKTgo5dWxbZdiomxsEwhiDfTlw52YZluG7gI"}

Decoded JWT token format:
{
    accountId: <number>,  // This corresponds with the actual primary key in the Account table.
    email: "<email>",
    iat: <standard JWT IAT value>,
    exp: <standard JWT EXP value>
}

Example request:

var xhttp = new XMLHttpRequest();
xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && statusReturnsResponse(this.status)) {
        console.log(this.response);
    }
};
xhttp.open("POST", "http://tshare-back-end.herokuapp.com/account/login", true);
xhttp.setRequestHeader("Content-Type", "application/json");
xhttp.send(JSON.stringify({
    email: "eric.d.mcdonald@gmail.com",
    password: "myValidTestPwd123@",
}));


/account/change-password:

This route is for changing your password while you're logged in. It takes three parameters: loginToken, newPassword, and currentPassword all wrapped in an Object. If the login token is invalid, the request is considered rejected and a message with a success status of false is returned. This route will return success even if the user's password is the same as before:
- loginToken: String
- newPassword: String
- currentPassword: String

Returns a message and a success status wrapped in an Object:
{"message":"Updated your password in the database successfully.","success":true}

Example request:

var xhttp = new XMLHttpRequest();
xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && statusReturnsResponse(this.status)) {
        console.log(this.response);
    }
};
xhttp.open("POST", "http://localhost/account/change-password", true);
xhttp.setRequestHeader("Content-Type", "application/json");
xhttp.send(JSON.stringify({
    loginToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50SWQiOjI4NCwiZW1haWwiOiJlcmljLmQubWNkb25hbGRAZ21haWwuY29tIiwiaWF0IjoxNjIzMDE2NjI3LCJleHAiOjE2MjMwMTY5Mjd9.gIXfYy3TKTgo5dWxbZdiomxsEwhiDfTlw52YZluG7gI",
    newPassword: "MyNewValidTestPwd123!",
    currentPassword: "MyOldValidTestPwd123!"
}));


/account/check-login:

This route checks a user's login token for validity. It takes one parameter: loginToken wrapped in an Object. For now, multiple sessions are allowed. If the login token is invalid, the request is considered rejected and a message with a success status of false is returned:
- loginToken: String

Returns a message and a success status wrapped in an Object:
{"message":"Your login token is still valid.","success":true}

Example request:

var xhttp = new XMLHttpRequest();
xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && statusReturnsResponse(this.status)) {
        console.log(this.response);
    }
};
xhttp.open("POST", "http://tshare-back-end.herokuapp.com/account/check-login", true);
xhttp.setRequestHeader("Content-Type", "application/json");
xhttp.send(JSON.stringify({
    loginToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50SWQiOjI4NCwiZW1haWwiOiJlcmljLmQubWNkb25hbGRAZ21haWwuY29tIiwiaWF0IjoxNjIzMDE2NjI3LCJleHAiOjE2MjMwMTY5Mjd9.gIXfYy3TKTgo5dWxbZdiomxsEwhiDfTlw52YZluG7gI"
}));


/account/forgot-password:

This route is for a user to request a password change. It sends the user an email to the email address specified in the request object. It takes one parameter: email wrapped in an Object:
- email: String

Returns a message and a success status wrapped in an Object:
{"message":"A password reset email has been sent to eric.d.mcdonald@gmail.com","success":true}

Example request:

var xhttp = new XMLHttpRequest();
xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && statusReturnsResponse(this.status)) {
	console.log(xhttp.responseText);
    }
};
xhttp.open("POST", "http://tshare-back-end.herokuapp.com/account/forgot-password", true);
xhttp.setRequestHeader("Content-Type", "application/json");
xhttp.send(JSON.stringify({
	email: "eric.d.mcdonald@gmail.com"
}));


/account/reset-password/:resetPwdId:

This route is for the INTERNAL link that is sent for a password reset email. Basically, the front-end should have a route like /reset-password/<id> that displays a password reset page that then connects to here.
It takes one parameter: newPassword wrapped in an Object, as well as the resetPwdId in the URL parameters. Please note that the newPassword parameter must follow the password conventions used in /models/accountUtil#isPasswordValid:
- newPassword: String

Returns a message and a success status wrapped in an Object:
{"message":"Your password has been reset successfully.","success":true}

Example request:

var xhttp = new XMLHttpRequest();
xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && statusReturnsResponse(this.status)) {
	console.log(xhttp.responseText);
    }
};
xhttp.open("POST", "http://tshare-back-end.herokuapp.com/account/reset-password/38806", true);
xhttp.setRequestHeader("Content-Type", "application/json");
xhttp.send(JSON.stringify({
	newPassword: "myNewValidPassword123!"
}));


/account/check-password-reset/:resetPwdId:

This route is for verifying that a password reset sub-link (the ID that gets generated for a password reset) exists. Please note that this is a GET request this time instead of the usual POST requests. It takes one parameter: the password reset sub-link (in the URL).
- resetPwdId: String

Returns an Object containing at least message and success:
If the sub-link is invalid, a success status of false is returned with HTTP error code 401:
{"message":"Your password reset link is not valid.","success":false}
If the sub-link is valid, a success status of true is returned with HTTP error code 200:
{"message":"Your password reset link is still valid.","success":true}

Example request:

var xhttp = new XMLHttpRequest();
xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && statusReturnsResponse(this.status)) {
	console.log(xhttp.responseText);
    }
};
xhttp.open("GET", "http://tshare-back-end.herokuapp.com/account/check-password-reset/38806", true);
xhttp.setRequestHeader("Content-Type", "application/json");
xhttp.send();


/account/get-preferences:

This route retrieves the user's preferences from the database into an Object called preferences. The only property the preferences Object has is dateFormat currently.
It takes one parameter: your loginToken wrapped in an Object:
- loginToken: String

Returns an Object containing at least message and success. Please note that the preferences Object is not returned if the request is rejected:
{"message":"Successfully retrieved a user's preferences.","success":true,"preferences":{"dateFormat":"M/d/yy, h:mm a"}}  // By default, the date format is "M/d/yy, h:mm a" for new users.

Example request:

var xhttp = new XMLHttpRequest();
xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && statusReturnsResponse(this.status)) {
        console.log(this.response);
    }
};
xhttp.open("POST", "http://localhost/account/get-preferences", true);
xhttp.setRequestHeader("Content-Type", "application/json");
xhttp.send(JSON.stringify({
    loginToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50SWQiOjI4NCwiZW1haWwiOiJlcmljLmQubWNkb25hbGRAZ21haWwuY29tIiwiaWF0IjoxNjIzMDE2NjI3LCJleHAiOjE2MjMwMTY5Mjd9.gIXfYy3TKTgo5dWxbZdiomxsEwhiDfTlw52YZluG7gI"
}));


/account/update-preferences:

This route will update the user's preferences to the ones specified in preferences within the request Object. preferences.dateFormat must be a valid Angular date format (see accountUtil#isAngularDateFormatValid for a list of valid types).
It takes two parameters: your loginToken and preferences wrapped in an Object. The preferences Object should contain dateFormat:
- loginToken: String
- preferences: Object, containing dateFormat: String

Returns an Object containing message and success:
{"message":"Successfully updated your user preferences.","success":true}

Example request:

var xhttp = new XMLHttpRequest();
xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && statusReturnsResponse(this.status)) {
        console.log(this.response);
    }
};
xhttp.open("POST", "http://localhost/account/update-preferences", true);
xhttp.setRequestHeader("Content-Type", "application/json");
xhttp.send(JSON.stringify({
    loginToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50SWQiOjI4NCwiZW1haWwiOiJlcmljLmQubWNkb25hbGRAZ21haWwuY29tIiwiaWF0IjoxNjIzMDE2NjI3LCJleHAiOjE2MjMwMTY5Mjd9.gIXfYy3TKTgo5dWxbZdiomxsEwhiDfTlw52YZluG7gI",
    preferences: {
        dateFormat: "h:mm:ss a zzzz"
    }
}));


/account/list:

This route allows a user to list all of the users on our system. It lists each user's accountId, email, and permissions level. You can use the permissionsLvl variable to determine if a user is a normal user or an admin. Normal users can be determined by a permissionsLvl of 0.
It takes one parameter: loginToken wrapped in an Object:
- loginToken: String

Returns an Object containing message and success, and optionally the list of users:
{"message":"Successfully retrieved a list of users on the system.","success":true,"users":[{"accountId":1034,"email":"eric.d.mcdonald@gmail.com","permissionsLvl":0},{"accountId":1044,"email":"tmoss404@gmail.com","permissionsLvl":0},{"accountId":1054,"email":"misha@mail.ru","permissionsLvl":0},{"accountId":1064,"email":"ramon.galindo1997@gmail.com","permissionsLvl":0},{"accountId":1074,"email":"testhjhgjbackend43e@gmail.com","permissionsLvl":0},{"accountId":1084,"email":"testackend43e@gmail.com","permissionsLvl":0},{"accountId":1094,"email":"te.backend43e@gmail.com","permissionsLvl":0},{"accountId":1104,"email":"test.backend43e@gmail.com","permissionsLvl":0},{"accountId":1114,"email":"testghjhgjkend43e@gmail.com","permissionsLvl":0},{"accountId":1124,"email":"testhfhfgackend43e@gmail.com","permissionsLvl":0},{"accountId":1134,"email":"testjhgjbackend420@gmail.com","permissionsLvl":0},{"accountId":1144,"email":"testghjhgjbackend43e@gmail.com","permissionsLvl":0},{"accountId":1154,"email":"testghjghjghjbackend43e@gmail.com","permissionsLvl":0},{"accountId":1164,"email":"testbjghjghbackend420@gmail.com","permissionsLvl":0},{"accountId":1174,"email":"testfhgfhgfhgfhgfbackend43e@gmail.com","permissionsLvl":0},{"accountId":1184,"email":"testfghgfhfghgfbackend43e@gmail.com","permissionsLvl":0},{"accountId":1194,"email":"test.fhgfhhackend43e@gmail.com","permissionsLvl":0},{"accountId":1204,"email":"testhjhgjghjbackend43e@gmail.com","permissionsLvl":0},{"accountId":1214,"email":"testdfgfgretertbackend43e@gmail.com","permissionsLvl":0},{"accountId":1224,"email":"testertreterbackend43e@gmail.com","permissionsLvl":0},{"accountId":1234,"email":"testfghgfhhrtyhbackend43e@gmail.com","permissionsLvl":0},{"accountId":1244,"email":"testfeehrtyhbackend43e@gmail.com","permissionsLvl":0},{"accountId":1254,"email":"testreteretertbackend43e@gmail.com","permissionsLvl":0},{"accountId":1264,"email":"testfghgffghgfhbackend420@gmail.com","permissionsLvl":0},{"accountId":1274,"email":"testertrtertrebackend420@gmail.com","permissionsLvl":0},{"accountId":1284,"email":"testertreterbackend420@gmail.com","permissionsLvl":0},{"accountId":1294,"email":"test.backend420@gmail.com","permissionsLvl":0},{"accountId":1304,"email":"testgfhfghfgbackend420@gmail.com","permissionsLvl":0},{"accountId":1314,"email":"tefghfgbackend420@gmail.com","permissionsLvl":0},{"accountId":1324,"email":"test3453534backend420@gmail.com","permissionsLvl":0},{"accountId":1334,"email":"testdgfdgfdgackend420@gmail.com","permissionsLvl":0},{"accountId":1344,"email":"testfgyfghgfhbackend420@gmail.com","permissionsLvl":0},{"accountId":1354,"email":"testrdtretebackend43e@gmail.com","permissionsLvl":0},{"accountId":1364,"email":"testtrytrybackend43e@gmail.com","permissionsLvl":0},{"accountId":1374,"email":"testhckend43e@gmail.com","permissionsLvl":0},{"accountId":1384,"email":"test4543543backend43e@gmail.com","permissionsLvl":0},{"accountId":1394,"email":"test546654backend420@gmail.com","permissionsLvl":0},{"accountId":1404,"email":"test345443345backend43e@gmail.com","permissionsLvl":0},{"accountId":1414,"email":"test3453534backend43e@gmail.com","permissionsLvl":0},{"accountId":1424,"email":"test34534343backend43e@gmail.com","permissionsLvl":0},{"accountId":1434,"email":"test2342323backend43e@gmail.com","permissionsLvl":0},{"accountId":1444,"email":"test34553backend420@gmail.com","permissionsLvl":0},{"accountId":1454,"email":"test342423backend43e@gmail.com","permissionsLvl":0},{"accountId":1464,"email":"testrttrbackend420@gmail.com","permissionsLvl":0},{"accountId":1474,"email":"test1@email.com","permissionsLvl":0},{"accountId":1484,"email":"test32423backend43e@gmail.com","permissionsLvl":0},{"accountId":1494,"email":"test45345backend43e@gmail.com","permissionsLvl":0},{"accountId":1504,"email":"test345343backend43e@gmail.com","permissionsLvl":0},{"accountId":1514,"email":"test344444backend43e@gmail.com","permissionsLvl":0},{"accountId":1524,"email":"test4443211backend43e@gmail.com","permissionsLvl":0},{"accountId":1534,"email":"test44444backend43e@gmail.com","permissionsLvl":0},{"accountId":1544,"email":"test33423421backend43e@gmail.com","permissionsLvl":0},{"accountId":1554,"email":"test456465654654backend420@gmail.com","permissionsLvl":0},{"accountId":1564,"email":"test4534534backend43e@gmail.com","permissionsLvl":0},{"accountId":1574,"email":"test5654654ackend420@gmail.com","permissionsLvl":0},{"accountId":1584,"email":"testrtytyrtyrtbackend420@gmail.com","permissionsLvl":0},{"accountId":1594,"email":"tes43543534backend420@gmail.com","permissionsLvl":0},{"accountId":1604,"email":"te454565466546backend420@gmail.com","permissionsLvl":0},{"accountId":1614,"email":"t.backend420@gmail.com","permissionsLvl":0},{"accountId":1624,"email":"teuyhjuiackend420@gmail.com","permissionsLvl":0},{"accountId":1634,"email":"testtyutubackend420@gmail.com","permissionsLvl":0},{"accountId":1644,"email":"tesghjhgjhgjjghbackend420@gmail.com","permissionsLvl":0},{"accountId":1654,"email":"tesghjhgjhgjjgackend420@gmail.com","permissionsLvl":0},{"accountId":1664,"email":"testfghghgfhgfhbackend420@gmail.com","permissionsLvl":0},{"accountId":1674,"email":"testhjghjhgjbackend420@gmail.com","permissionsLvl":0},{"accountId":1684,"email":"test.iuyiyuiyuiackend420@gmail.com","permissionsLvl":0},{"accountId":1694,"email":"testhuiuyiuyiybackend420@gmail.com","permissionsLvl":0},{"accountId":1704,"email":"testgyuyutyuackend420@gmail.com","permissionsLvl":0},{"accountId":1714,"email":"testhjgghjackend420@gmail.com","permissionsLvl":0},{"accountId":1724,"email":"tesghjjhgbackend420@gmail.com","permissionsLvl":0},{"accountId":1734,"email":"testuhiuiuyibackend420@gmail.com","permissionsLvl":0},{"accountId":1744,"email":"testjhkjhkhjkbackend420@gmail.com","permissionsLvl":0},{"accountId":1754,"email":"testfgtyutyuyubackend43e@gmail.com","permissionsLvl":0},{"accountId":1764,"email":"testhgjjghjhackend43e@gmail.com","permissionsLvl":0},{"accountId":1774,"email":"testhgjjuuuhjhackend43e@gmail.com","permissionsLvl":0},{"accountId":1784,"email":"testhgjjuuuhhhhhckend43e@gmail.com","permissionsLvl":0},{"accountId":1794,"email":"testhuuhhhhhckend43e@gmail.com","permissionsLvl":0},{"accountId":1804,"email":"teskkhjkbackend420@gmail.com","permissionsLvl":0},{"accountId":1814,"email":"testhjkjhkjkhjbackend43e@gmail.com","permissionsLvl":0},{"accountId":1824,"email":"sthjkjhkjkhjbackend43e@gmail.com","permissionsLvl":0},{"accountId":1834,"email":"sthhkjkhjbackend43e@gmail.com","permissionsLvl":0},{"accountId":1844,"email":"stkhjbackend43e@gmail.com","permissionsLvl":0},{"accountId":1854,"email":"siuouiojbackend43e@gmail.com","permissionsLvl":0},{"accountId":1864,"email":"teshjkhjkhjackend43e@gmail.com","permissionsLvl":0},{"accountId":1874,"email":"tesuyyuiuyiyackend43e@gmail.com","permissionsLvl":0},{"accountId":1884,"email":"tesjghjhgbackend43e@gmail.com","permissionsLvl":0},{"accountId":1894,"email":"tesjbackend43e@gmail.com","permissionsLvl":0},{"accountId":1904,"email":"testyuytutyubackend43e@gmail.com","permissionsLvl":0},{"accountId":1914,"email":"testyuytuba55ckend43e@gmail.com","permissionsLvl":0},{"accountId":1924,"email":"testhjkjhkjhackend43e@gmail.com","permissionsLvl":0},{"accountId":1934,"email":"1eyyhkjhackend43e@gmail.com","permissionsLvl":0},{"accountId":1944,"email":"2eyyhkjhackend43e@gmail.com","permissionsLvl":0},{"accountId":1954,"email":"3eyyhkjhackend43e@gmail.com","permissionsLvl":0},{"accountId":1964,"email":"4yyhkjhackend43e@gmail.com","permissionsLvl":0},{"accountId":1974,"email":"5yyhkjhackend43e@gmail.com","permissionsLvl":0},{"accountId":1984,"email":"tesghjhgjghjackend43e@gmail.com","permissionsLvl":0},{"accountId":1994,"email":"thjhgjghjackend43e@gmail.com","permissionsLvl":0},{"accountId":2004,"email":"testhjghjghbackend420@gmail.com","permissionsLvl":0},{"accountId":2014,"email":"testfdgfdgfdgfbackend43e@gmail.com","permissionsLvl":0},{"accountId":2024,"email":"testhgjhgjhgjbackend43e@gmail.com","permissionsLvl":0},{"accountId":2034,"email":"testdfgfdgdfg455ackend43e@gmail.com","permissionsLvl":0},{"accountId":2044,"email":"testhjhgjgjbackend43e@gmail.com","permissionsLvl":0},{"accountId":2054,"email":"testhhjhgjjghbackend43e@gmail.com","permissionsLvl":0},{"accountId":2064,"email":"tesghjhjgackend420@gmail.com","permissionsLvl":0},{"accountId":2074,"email":"testhjgjhgjhghgbackend43e@gmail.com","permissionsLvl":0},{"accountId":2084,"email":"testvhjhgjhgjbackend420@gmail.com","permissionsLvl":0},{"accountId":2094,"email":"tejkhjkhk.backend43e@gmail.com","permissionsLvl":0},{"accountId":2104,"email":"tejkh1jkhk.backend43e@gmail.com","permissionsLvl":0},{"accountId":2114,"email":"tej3h1jkhk.backend43e@gmail.com","permissionsLvl":0},{"accountId":2124,"email":"t3j3h1jkhk.backend43e@gmail.com","permissionsLvl":0},{"accountId":2134,"email":"t4j3h1jkhk.backend43e@gmail.com","permissionsLvl":0},{"accountId":2144,"email":"tsthhgjghjhgbackend43e@gmail.com","permissionsLvl":0},{"accountId":2154,"email":"tesjhkhjkhjbackend43e@gmail.com","permissionsLvl":0},{"accountId":2164,"email":"teskkljllackend43e@gmail.com","permissionsLvl":0},{"accountId":2174,"email":"teskjljljlkljl78backend43e@gmail.com","permissionsLvl":0},{"accountId":2184,"email":"testjhkhjkkh6ackend43e@gmail.com","permissionsLvl":0},{"accountId":2194,"email":"thjjjhkhjkkh6ackend43e@gmail.com","permissionsLvl":0},{"accountId":2204,"email":"tijjhkhjkkh6ackend43e@gmail.com","permissionsLvl":0},{"accountId":2214,"email":"tijjhghjhjhjkkh6ackend43e@gmail.com","permissionsLvl":0},{"accountId":2224,"email":"tijjhjhjhjkkh6ackend43e@gmail.com","permissionsLvl":0},{"accountId":2234,"email":"ijjhjhjhjkkh6ackend43e@gmail.com","permissionsLvl":0},{"accountId":2244,"email":"tesyuyyiuyackend43e@gmail.com","permissionsLvl":0},{"accountId":2254,"email":"tesyuiyuiyuiackend43e@gmail.com","permissionsLvl":0},{"accountId":2264,"email":"tsyuiyuiyuiackend43e@gmail.com","permissionsLvl":0},{"accountId":2274,"email":"yuiyuiyuiackend43e@gmail.com","permissionsLvl":0},{"accountId":2284,"email":"yu6yuiyuiackend43e@gmail.com","permissionsLvl":0},{"accountId":2294,"email":"yu7yuiyuiackend43e@gmail.com","permissionsLvl":0},{"accountId":2304,"email":"yu75yuiyuiackend43e@gmail.com","permissionsLvl":0},{"accountId":2314,"email":"yu76yuiyuiackend43e@gmail.com","permissionsLvl":0},{"accountId":2324,"email":"yu767uiyuiackend43e@gmail.com","permissionsLvl":0},{"accountId":2334,"email":"testhgjgjghjbackend43e@gmail.com","permissionsLvl":0},{"accountId":2344,"email":"testukhhjkjhbackend43e@gmail.com","permissionsLvl":0},{"accountId":2354,"email":"testhkhjkjhkjbackend43e@gmail.com","permissionsLvl":0},{"accountId":2364,"email":"tekhjkjhkjbackend43e@gmail.com","permissionsLvl":0},{"accountId":2374,"email":"thjkjhkjbackend43e@gmail.com","permissionsLvl":0},{"accountId":2384,"email":"tkllkkkjhkjbackend43e@gmail.com","permissionsLvl":0},{"accountId":2394,"email":"testhghjjhgbackend43e@gmail.com","permissionsLvl":0},{"accountId":2404,"email":"testfghfghfghbackend43e@gmail.com","permissionsLvl":0},{"accountId":2414,"email":"teskjkjhkhjbackend43e@gmail.com","permissionsLvl":0},{"accountId":2424,"email":"tesujkhjkhjk6backend43e@gmail.com","permissionsLvl":0},{"accountId":2434,"email":"testjjhkjhk876backend43e@gmail.com","permissionsLvl":0},{"accountId":2444,"email":"testytu76876backend43e@gmail.com","permissionsLvl":0},{"accountId":2454,"email":"testukoiuoackend43e@gmail.com","permissionsLvl":0},{"accountId":2464,"email":"testkhjkkhbackend43e@gmail.com","permissionsLvl":0},{"accountId":2474,"email":"tkhjkkhbackend43e@gmail.com","permissionsLvl":0},{"accountId":2484,"email":"testoiouioiobackend43e@gmail.com","permissionsLvl":0},{"accountId":2494,"email":"testljkjklkjlkjbackend43e@gmail.com","permissionsLvl":0},{"accountId":2504,"email":"toiopoipio.backend43e@gmail.com","permissionsLvl":0},{"accountId":2514,"email":"testyuiyuiuyiackend43e@gmail.com","permissionsLvl":0},{"accountId":2524,"email":"testjhkhkhjkbackend43e@gmail.com","permissionsLvl":0},{"accountId":2534,"email":"testhgfhgfhackend43e@gmail.com","permissionsLvl":0},{"accountId":2544,"email":"tesljljk.backend43e@gmail.com","permissionsLvl":0},{"accountId":2554,"email":"testjhgjhgjbackend43e@gmail.com","permissionsLvl":0}]}

Example request:

var xhttp = new XMLHttpRequest();
xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && statusReturnsResponse(this.status)) {
        console.log(this.response);
    }
};
xhttp.open("POST", "http://localhost/account/list", true);
xhttp.setRequestHeader("Content-Type", "application/json");
xhttp.send(JSON.stringify({
    loginToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50SWQiOjI4NCwiZW1haWwiOiJlcmljLmQubWNkb25hbGRAZ21haWwuY29tIiwiaWF0IjoxNjIzMDE2NjI3LCJleHAiOjE2MjMwMTY5Mjd9.gIXfYy3TKTgo5dWxbZdiomxsEwhiDfTlw52YZluG7gI"
}));
