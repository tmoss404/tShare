All permission-related routes are prefixed with /permission/ and follow-this-naming-convention-with-hyphens. Data validation is done by this server.
Also, all requests have the fields listed wrapped in an Object. All routes should return at least a message and a success status wrapped in an Object.



// Add this function to your web browser's console before running the example scripts:
// Hey, don't blame me! Tanner wanted the HTTP statuses to work like this for the Angular side of things.
function statusReturnsResponse(status) {
    return true;
}



/permission/request:

This route allows a user to request permission to access another user's files. It takes five parameters: loginToken, path, isDirectory, requesteeAccountId, permissionFlags all wrapped in an Object:
- loginToken: String
- path: String
- isDirectory: boolean, indicates whether or not path specifies a directory or a file,
- requesteeAccountId: int, specifies the user to request the file from
- permissionFlags: int, please see permissionUtil for more information on how these flags work. Please note that the create and delete permissions are not valid when isDirectory is false.

Returns an Object containing message and success:
{"message":"Successfully requested a directory from the requestee.","success":true}

Example request:

var xhttp = new XMLHttpRequest();
xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && statusReturnsResponse(this.status)) {
        console.log(this.response);
    }
};
xhttp.open("POST", "http://localhost/permission/request", true);
xhttp.setRequestHeader("Content-Type", "application/json");
xhttp.send(JSON.stringify({
    loginToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50SWQiOjI5NCwiZW1haWwiOiJ0ZXN0LmJhY2tlbmRAZ21haWwuY29tIiwiaWF0IjoxNjIzMDQ1ODEyLCJleHAiOjE2MjMwNDk0MTJ9.2wZoRaMeEifG9KgSCm-TWV6QnTYk8f6Z_uWd0bHceLU",
    path: "your directory/file.txt",
    isDirectory: false,
    requesteeAccountId: 1034 /* eric.d.mcdonald@gmail.com */,
    permissionFlags: (1 << 2) /* read */ | (1 << 3) /* write */
}));


/permission/accept:

This route accepts a file permissions request using its request ID. It takes two parameters: loginToken and requestId wrapped in an Object. You can retrieve a request ID from the /permission/list-pending route.
- loginToken: String
- requestId: int

Returns an Object containing messsge and success:
{"message":"Successfully accepted a file permissions request.","success":true}

Example request:

var xhttp = new XMLHttpRequest();
xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && statusReturnsResponse(this.status)) {
        console.log(this.response);
    }
};
xhttp.open("POST", "http://localhost/permission/accept", true);
xhttp.setRequestHeader("Content-Type", "application/json");
xhttp.send(JSON.stringify({
    loginToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50SWQiOjI5NCwiZW1haWwiOiJ0ZXN0LmJhY2tlbmRAZ21haWwuY29tIiwiaWF0IjoxNjIzMDQ1ODEyLCJleHAiOjE2MjMwNDk0MTJ9.2wZoRaMeEifG9KgSCm-TWV6QnTYk8f6Z_uWd0bHceLU",
    requestId: 104
}));


/permission/deny:

This route denies a file permissions request using its request ID. It takes two parameters: loginToken and requestId wrapped in an Object. You can retrieve a request ID from the /permission/list-pending route.
- loginToken: String
- requestId: int

Returns an Object containing messsge and success:
{"message":"Successfully denied a file permissions request.","success":true}

Example request:

var xhttp = new XMLHttpRequest();
xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && statusReturnsResponse(this.status)) {
        console.log(this.response);
    }
};
xhttp.open("POST", "http://localhost/permission/deny", true);
xhttp.setRequestHeader("Content-Type", "application/json");
xhttp.send(JSON.stringify({
    loginToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50SWQiOjI5NCwiZW1haWwiOiJ0ZXN0LmJhY2tlbmRAZ21haWwuY29tIiwiaWF0IjoxNjIzMDQ1ODEyLCJleHAiOjE2MjMwNDk0MTJ9.2wZoRaMeEifG9KgSCm-TWV6QnTYk8f6Z_uWd0bHceLU",
    requestId: 104
}));


/permission/list-pending:

This route lists your pending file requests. It takes one parameter loginToken wrapped in an Object:
- loginToken: String

Returns an Object containing at least message and success:
{"message":"Successfully retrieved a list of your pending file requests.","success":true,"permissionRequests":[{"requestId":114,"permissionFlags":15,"forAccountId":3964,"requestedFile":{"path":"1034/my directory/Part1a.docx","ownerId":1034,"isDirectory":false}},{"requestId":124,"permissionFlags":15,"forAccountId":3964,"requestedFile":{"path":"1034/my directory/PRO670 - Control Statements.pptm","ownerId":1034,"isDirectory":false}},{"requestId":134,"permissionFlags":15,"forAccountId":4074,"requestedFile":{"path":"1034/my directory/__tshare-placeholder__","ownerId":1034,"isDirectory":true}},{"requestId":144,"permissionFlags":15,"forAccountId":4074,"requestedFile":{"path":"1034/my directory/Part1a.docx","ownerId":1034,"isDirectory":false}},{"requestId":154,"permissionFlags":15,"forAccountId":4074,"requestedFile":{"path":"1034/my directory/PRO670 - Control Statements.pptm","ownerId":1034,"isDirectory":false}},{"requestId":164,"permissionFlags":15,"forAccountId":4084,"requestedFile":{"path":"1034/my directory/__tshare-placeholder__","ownerId":1034,"isDirectory":true}},{"requestId":174,"permissionFlags":15,"forAccountId":4084,"requestedFile":{"path":"1034/my directory/Part1a.docx","ownerId":1034,"isDirectory":false}},{"requestId":184,"permissionFlags":15,"forAccountId":4084,"requestedFile":{"path":"1034/my directory/PRO670 - Control Statements.pptm","ownerId":1034,"isDirectory":false}},{"requestId":194,"permissionFlags":15,"forAccountId":4094,"requestedFile":{"path":"1034/my directory/__tshare-placeholder__","ownerId":1034,"isDirectory":true}},{"requestId":204,"permissionFlags":15,"forAccountId":4094,"requestedFile":{"path":"1034/my directory/Part1a.docx","ownerId":1034,"isDirectory":false}},{"requestId":214,"permissionFlags":15,"forAccountId":4094,"requestedFile":{"path":"1034/my directory/PRO670 - Control Statements.pptm","ownerId":1034,"isDirectory":false}},{"requestId":224,"permissionFlags":15,"forAccountId":4104,"requestedFile":{"path":"1034/my directory/__tshare-placeholder__","ownerId":1034,"isDirectory":true}},{"requestId":234,"permissionFlags":15,"forAccountId":4104,"requestedFile":{"path":"1034/my directory/Part1a.docx","ownerId":1034,"isDirectory":false}},{"requestId":244,"permissionFlags":15,"forAccountId":4104,"requestedFile":{"path":"1034/my directory/PRO670 - Control Statements.pptm","ownerId":1034,"isDirectory":false}},{"requestId":254,"permissionFlags":15,"forAccountId":4114,"requestedFile":{"path":"1034/my directory/__tshare-placeholder__","ownerId":1034,"isDirectory":true}},{"requestId":264,"permissionFlags":15,"forAccountId":4114,"requestedFile":{"path":"1034/my directory/Part1a.docx","ownerId":1034,"isDirectory":false}},{"requestId":274,"permissionFlags":15,"forAccountId":4114,"requestedFile":{"path":"1034/my directory/PRO670 - Control Statements.pptm","ownerId":1034,"isDirectory":false}},{"requestId":284,"permissionFlags":15,"forAccountId":4124,"requestedFile":{"path":"1034/my directory/__tshare-placeholder__","ownerId":1034,"isDirectory":true}},{"requestId":294,"permissionFlags":15,"forAccountId":4124,"requestedFile":{"path":"1034/my directory/Part1a.docx","ownerId":1034,"isDirectory":false}},{"requestId":304,"permissionFlags":15,"forAccountId":4124,"requestedFile":{"path":"1034/my directory/PRO670 - Control Statements.pptm","ownerId":1034,"isDirectory":false}}]}

Example request:
var xhttp = new XMLHttpRequest();
xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && statusReturnsResponse(this.status)) {
        console.log(this.response);
    }
};
xhttp.open("POST", "http://localhost/permission/list-pending", true);
xhttp.setRequestHeader("Content-Type", "application/json");
xhttp.send(JSON.stringify({
    loginToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50SWQiOjI5NCwiZW1haWwiOiJ0ZXN0LmJhY2tlbmRAZ21haWwuY29tIiwiaWF0IjoxNjIzMDQ1ODEyLCJleHAiOjE2MjMwNDk0MTJ9.2wZoRaMeEifG9KgSCm-TWV6QnTYk8f6Z_uWd0bHceLU"
}));


/permission/list-files:

This route allows you to navigate through the specified user's files. It takes 4 parameters: loginToken, showNestedFiles, targetAccountId, and dirPath all wrapped in an Object. The dirPath parameter is optional. This route basically works the same as /file/list:
- loginToken: String
- showNestedFiles: boolean, indicates whether or not to show files that are in nested folders
- targetAccountId: int, the account ID of the user you want to view their files
- dirPath: String, specifies a directory/folder

Returns an Object containing at least message and success:
{"message":"Successfully retrieved the user's files.","success":true,"data":{"IsTruncated":false,"Contents":[{"Key":"new","LastModified":"2021-07-30T00:06:29.000Z","ETag":"\"d41d8cd98f00b204e9800998ecf8427e\"","Size":0,"StorageClass":"STANDARD","isDirectory":true,"owner":{"email":"tmoss404@gmail.com","accountId":1044}},{"Key":"newer","LastModified":"2021-07-30T00:07:28.000Z","ETag":"\"d41d8cd98f00b204e9800998ecf8427e\"","Size":0,"StorageClass":"STANDARD","isDirectory":true,"owner":{"email":"tmoss404@gmail.com","accountId":1044}},{"Key":"test file.txt","LastModified":"2021-07-28T06:44:57.000Z","ETag":"\"35514d826e43b73a16fb42048988f8e3\"","Size":13,"StorageClass":"STANDARD","isDirectory":false,"owner":{"email":"tmoss404@gmail.com","accountId":1044}},{"Key":"test file_1.txt","LastModified":"2021-07-29T16:48:49.000Z","ETag":"\"35514d826e43b73a16fb42048988f8e3\"","Size":13,"StorageClass":"STANDARD","isDirectory":false,"owner":{"email":"tmoss404@gmail.com","accountId":1044}},{"Key":"test file_2.txt","LastModified":"2021-07-29T16:48:58.000Z","ETag":"\"35514d826e43b73a16fb42048988f8e3\"","Size":13,"StorageClass":"STANDARD","isDirectory":false,"owner":{"email":"tmoss404@gmail.com","accountId":1044}},{"Key":"test file_3.txt","LastModified":"2021-07-29T16:50:17.000Z","ETag":"\"35514d826e43b73a16fb42048988f8e3\"","Size":13,"StorageClass":"STANDARD","isDirectory":false,"owner":{"email":"tmoss404@gmail.com","accountId":1044}},{"Key":"test file_4.txt","LastModified":"2021-07-29T18:51:30.000Z","ETag":"\"35514d826e43b73a16fb42048988f8e3\"","Size":13,"StorageClass":"STANDARD","isDirectory":false,"owner":{"email":"tmoss404@gmail.com","accountId":1044}}],"Name":"bucketeer-72303b66-e175-4b67-aade-fd2764a19e0b","Prefix":"","MaxKeys":1000,"CommonPrefixes":[],"KeyCount":7}}

Example request:
var xhttp = new XMLHttpRequest();
xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && statusReturnsResponse(this.status)) {
        console.log(this.response);
    }
};
xhttp.open("POST", "http://localhost/permission/list-files", true);
xhttp.setRequestHeader("Content-Type", "application/json");
xhttp.send(JSON.stringify({
    loginToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50SWQiOjI5NCwiZW1haWwiOiJ0ZXN0LmJhY2tlbmRAZ21haWwuY29tIiwiaWF0IjoxNjIzMDQ1ODEyLCJleHAiOjE2MjMwNDk0MTJ9.2wZoRaMeEifG9KgSCm-TWV6QnTYk8f6Z_uWd0bHceLU,
    showNestedFiles: false,
    dirPath: null,
    targetAccountId: 1044
}));
